import heapq

class Node:
    def __init__(self, state, parent, g, h):
        self.state = state
        self.parent = parent
        self.g = g
        self.h = h
        self.f = g + h
    def __lt__(self, other):
        return self.f < other.f

def a_star(start, goal, heuristic, get_neighbors):
    open_list = []
    heapq.heappush(open_list, Node(start, None, 0, heuristic(start, goal)))
    closed_set = set()

    while open_list:
        current = heapq.heappop(open_list)
        if current.state == goal:
            path = []
            while current:
                path.append(current.state)
                current = current.parent
            return path[::-1]

        closed_set.add(current.state)

        for neighbor, cost in get_neighbors(current.state):
            if neighbor in closed_set:
                continue
            g = current.g + cost
            h = heuristic(neighbor, goal)
            node = Node(neighbor, current, g, h)
            if all(n.state != neighbor or n.f > node.f for n in open_list):
                heapq.heappush(open_list, node)
    return None

# Manhattan distance
def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# 4-direction neighbors
def neighbors(pos):
    x, y = pos
    return [((x+dx, y+dy), 1) for dx, dy in [(1,0), (-1,0), (0,1), (0,-1)]]

# Run example
start, goal = (0, 0), (3, 3)
path = a_star(start, goal, heuristic, neighbors)
print("Path from start to goal:", path)
